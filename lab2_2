import java.io.File;
import java.io.FileNotFoundException;
import java.nio.charset.StandardCharsets;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        System.out.println("Choose an option:");
        System.out.println("1. Detect a sentence with nested brackets.");
        System.out.println("2. Exit");

        int input = scanner.nextInt();
        scanner.nextLine();  // to consume newline left-over

        if (input == 1) {
            File file = null;
            Scanner fileScanner = null;
            try {
                file = new File("C:\\Users\\user\\Desktop\\3 kurs\\1 sem\\KPP\\lab2\\sentences.txt");
                fileScanner = new Scanner(file, StandardCharsets.UTF_8.name());
                if (!file.exists()) {
                    System.out.println("File not found at: " + file.getAbsolutePath());
                    throw new FileNotFoundException("File not found at: " + file.getAbsolutePath());
                }
            } catch (FileNotFoundException e) {
                System.out.println("File not found: " + e.getMessage());
                return;
            }

            StringBuilder builder = new StringBuilder();
            while (fileScanner.hasNextLine()) {
                builder.append(fileScanner.nextLine()).append(" ");
            }

            String fileContents = builder.toString();
            LinkedList<String> sentences = GetSentencesWithBrackets(fileContents);

            System.out.println("Sentences with nested brackets:");
            for (String str : sentences) {
                System.out.println(str);
            }

        } else {
            System.out.println("Exiting...");
        }
    }

    public static LinkedList<String> GetSentencesWithBrackets(String text) {
        LinkedList<String> result = new LinkedList<>();

        Pattern sentencePattern = Pattern.compile("[^.!?]*([(]+[^.!?]*){2,}([)]+[^.!?]*){2,}[.!?]");
        Matcher matcher = sentencePattern.matcher(text);

        while (matcher.find()) {
            result.add(matcher.group().trim());
        }

        return result;
    }
}
